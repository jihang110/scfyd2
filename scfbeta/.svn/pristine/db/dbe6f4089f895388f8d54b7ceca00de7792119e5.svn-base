<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ut.scf.dao.finance.IReceiveAccountDao">
	<select id="selectReceiveAccountList" parameterType="hashmap"
		resultType="hashmap">
		select
		r.rec_uid recUid,
		r.corp_id corpId,
		c.corp_name corpName,
		r.contract_no contractNo,
		r.invoice_no invoiceNo,
		r.invoice_type invoiceType,
		r.invoice_amount invoiceAmount,
		r.net_day netDay,
		to_char(r.invoice_date,'yyyy-mm-dd') invoiceDate,
		to_char(r.estimated_pay_date,'yyyy-mm-dd') estimatedPayDate,
		r.estimated_pay_amount estimatedPayAmount,
		to_char(r.actual_pay_date,'yyyy-mm-dd') actualPayDate,
		r.actual_pay_amount actualPayAmount,
		r.if_overdue ifOverdue,
		r.overdue_days overdueDays
		from receive_account r join corp_info c on r.corp_id=c.corp_id
		<where>
			1=1 and c.status = 1
			<if test="corpId != null">
				and r.corp_id = #{corpId}
			</if>
			<if test="userCorpList !=null">
	  			and r.corp_id in ${userCorpList}
			</if>
			<if test="invoiceNo != null and invoiceNo!=''">
				and r.invoice_no LIKE CONCAT(CONCAT('%', #{invoiceNo}), '%')
			</if>
			<if test="createUserId != null">
				and r.create_user_id = #{createUserId}
			</if>
		</where>
		order by r.create_time desc
	</select>

	<insert id="insertReceiveAccount" parameterType="hashmap">
		insert into
		receive_account (rec_uid, corp_id, contract_no,
		invoice_no,
		invoice_type, invoice_amount,
		invoice_date, estimated_pay_date,
		estimated_pay_amount,net_day,
		actual_pay_date, actual_pay_amount, if_overdue,
		overdue_days, create_user_id,relate_cust_name,payout_num
		create_time)
		values
		(#{recUid,jdbcType=VARCHAR}, #{corpId,jdbcType=VARCHAR},
		#{contractNo,jdbcType=VARCHAR},
		#{invoiceNo,jdbcType=VARCHAR},
		#{invoiceType,jdbcType=TINYINT}, #{invoiceAmount,jdbcType=DECIMAL},
		#{invoiceDate,jdbcType=TIMESTAMP},
		#{estimatedPayDate,jdbcType=TIMESTAMP},
		#{estimatedPayAmount,jdbcType=DECIMAL},
		#{netDay,jdbcType=SMALLINT},
		#{actualPayDate,jdbcType=TIMESTAMP},
		#{actualPayAmount,jdbcType=DECIMAL}, #{ifOverdue,jdbcType=TINYINT},
		#{overdueDays,jdbcType=SMALLINT},
		#{createUserId,jdbcType=VARCHAR},
		#{relateCustName,jdbcType=VARCHAR},
		#{payoutNum,jdbcType=VARCHAR},
		now())
	</insert>

	<delete id="deleteReceiveAccount" parameterType="java.lang.String">
		delete from
		receive_account
		where rec_uid = #{recUid}
	</delete>

	<update id="updateReceiveAccount" parameterType="hashmap">
		update receive_account
		<set>
			<if test="corpId != null">
				corp_id = #{corpId,jdbcType=VARCHAR},
			</if>
			<if test="contractNo != null">
				contract_no = #{contractNo,jdbcType=VARCHAR},
			</if>
			<if test="invoiceNo != null">
				invoice_no = #{invoiceNo,jdbcType=VARCHAR},
			</if>
			<if test="invoiceType != null">
				invoice_type = #{invoiceType,jdbcType=TINYINT},
			</if>
			<if test="invoiceAmount != null">
				invoice_amount = #{invoiceAmount,jdbcType=DECIMAL},
			</if>
			<if test="invoiceDate != null">
				invoice_date = #{invoiceDate,jdbcType=TIMESTAMP},
			</if>
			<if test="estimatedPayDate != null">
				estimated_pay_date =
				#{estimatedPayDate,jdbcType=TIMESTAMP},
			</if>
			<if test="estimatedPayAmount != null">
				estimated_pay_amount =
				#{estimatedPayAmount,jdbcType=DECIMAL},
			</if>
			<if test="actualPayDate != null">
				actual_pay_date = #{actualPayDate,jdbcType=TIMESTAMP},
			</if>
			<if test="actualPayAmount != null">
				actual_pay_amount = #{actualPayAmount,jdbcType=DECIMAL},
			</if>
			<if test="ifOverdue != null">
				if_overdue = #{ifOverdue,jdbcType=TINYINT},
			</if>
			<if test="netDay != null">
				net_day = #{netDay,jdbcType=SMALLINT},
			</if>
			<if test="overdueDays != null">
				overdue_days = #{overdueDays,jdbcType=SMALLINT},
			</if>
			<if test="relateCustName != null">
				relate_cust_name = #{relateCustName,jdbcType=VARCHAR}
			</if>
			<if test="payoutNum != null">
				payout_num = #{payoutNum,jdbcType=VARCHAR}
			</if>
		</set>
		where rec_uid = #{recUid,jdbcType=VARCHAR}
	</update>
	
	<insert id="insertSelectiveByList" parameterType="list">
		INSERT INTO receive_account
		<trim prefix="(" suffix=")" suffixOverrides=",">
	      rec_uid,
	      <if test="list[0].corpId != null">
	        corp_id,
	      </if>
	      <if test="list[0].contractNo != null">
	        contract_no,
	      </if>
	      <if test="list[0].invoiceNo != null">
	        invoice_no,
	      </if>
	      <if test="list[0].invoiceType != null">
	        invoice_type,
	      </if>
	      <if test="list[0].invoiceAmount != null">
	        invoice_amount,
	      </if>
	      <if test="list[0].invoiceDate != null">
	        invoice_date,
	      </if>
	      <if test="list[0].estimatedPayDate != null">
	        estimated_pay_date,
	      </if>
	      <if test="list[0].estimatedPayAmount != null">
	        estimated_pay_amount,
	      </if>
	      <if test="list[0].actualPayDate != null">
	        actual_pay_date,
	      </if>
	      <if test="list[0].actualPayAmount != null">
	        actual_pay_amount,
	      </if>
	      <if test="list[0].netDay != null">
	        net_day,
	      </if>
	      <if test="list[0].ifOverdue != null">
	        if_overdue,
	      </if>
	      <if test="list[0].overdueDays != null">
	        overdue_days,
	      </if>
	      <if test="list[0].relateCustName != null">
	        relate_cust_name,
	      </if>
	      <if test="list[0].payoutNum != null">
			payout_num,
		  </if>
		  <if test="list[0].isRead != null">
			is_read,
		  </if>
	      <if test="list[0].createUserId != null">
	        create_user_id,
	      </if>
	      create_time,
	    </trim>
	    VALUES
	    <foreach collection="list" item="item" index="index" separator=",">
	    	<trim prefix="(" suffix=")" suffixOverrides=",">
		      #{item.recUid,jdbcType=VARCHAR},
		      <if test="item.corpId != null">
		        #{item.corpId,jdbcType=VARCHAR},
		      </if>
		      <if test="item.contractNo != null">
		        #{item.contractNo,jdbcType=VARCHAR},
		      </if>
		      <if test="item.invoiceNo != null">
		        #{item.invoiceNo,jdbcType=VARCHAR},
		      </if>
		      <if test="item.invoiceType != null">
		        #{item.invoiceType,jdbcType=BIT},
		      </if>
		      <if test="item.invoiceAmount != null">
		        #{item.invoiceAmount,jdbcType=DECIMAL},
		      </if>
		      <if test="item.invoiceDate != null">
		        #{item.invoiceDate,jdbcType=TIMESTAMP},
		      </if>
		      <if test="item.estimatedPayDate != null">
		        #{item.estimatedPayDate,jdbcType=TIMESTAMP},
		      </if>
		      <if test="item.estimatedPayAmount != null">
		        #{item.estimatedPayAmount,jdbcType=DECIMAL},
		      </if>
		      <if test="item.actualPayDate != null">
		        #{item.actualPayDate,jdbcType=TIMESTAMP},
		      </if>
		      <if test="item.actualPayAmount != null">
		        #{item.actualPayAmount,jdbcType=DECIMAL},
		      </if>
		      <if test="item.netDay != null">
		        #{item.netDay,jdbcType=SMALLINT},
		      </if>
		      <if test="item.ifOverdue != null">
		        #{item.ifOverdue,jdbcType=BIT},
		      </if>
		      <if test="item.overdueDays != null">
		        #{item.overdueDays,jdbcType=SMALLINT},
		      </if>
		      <if test="item.relateCustName != null">
		        #{item.relateCustName,jdbcType=VARCHAR},
		      </if>
		      <if test="item.payoutNum != null">
				#{item.payoutNum,jdbcType=VARCHAR},
			  </if>
			  <if test="item.isRead != null">
				#{item.isRead,jdbcType=BIT},
			  </if>
		      <if test="item.createUserId != null">
		        #{item.createUserId,jdbcType=VARCHAR},
		      </if>
		      now(),
		    </trim>
	    </foreach>
	</insert>

	<select id="getSupportByPush" resultType="hashmap" parameterType="hashmap">
		SELECT ra.rec_uid recUid,
		ra.serial_num serialNum, ci.corp_name custName, ra.corp_id corpId, ra.contract_no contractNum,
		ra.payout_num payoutNum, ra.currency_cd currencyCd, ra.estimated_pay_amount prepaymentAmt,
		ra.actual_pay_amount entityAmt, ra.invoice_no billNum 
		FROM receive_account ra, (
			SELECT corp_id, corp_name FROM corp_info WHERE sys_type = #{sysType}
			AND core_corp_id = (SELECT corp_id FROM corp_info WHERE orgn_num = #{orgnNum})
		) ci
		WHERE ra.corp_id = ci.corp_id AND ra.serial_num IS NULL
  		ORDER BY ra.create_time, #{size}
	</select>
	
	<update id="updateSupportByPush" parameterType="list">
	  	UPDATE receive_account 
	  	SET serial_num = CASE rec_uid
	  	<foreach collection="list" item="item" index="index">
	  		WHEN #{item.recUid} THEN #{item.serialNum}
	  	</foreach>
	  	END WHERE rec_uid IN
	  	<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
			#{item.recUid}
		</foreach>
	</update>
</mapper>
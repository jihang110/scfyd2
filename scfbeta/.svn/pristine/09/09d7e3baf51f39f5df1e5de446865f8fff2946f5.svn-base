package com.ut.scf.web.controller.bpm;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.impl.cmd.GetDeploymentProcessDiagramCmd;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.task.Task;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.ut.scf.reqbean.bpm.ActFlowStartReqBean;
import com.ut.scf.reqbean.bpm.ActFlowReqBean;
import com.ut.scf.core.util.ActProcessInstanceDiagramCmd;
import com.ut.scf.reqbean.bpm.ProjectPageReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.service.bpm.IActFlowService;
import com.ut.scf.web.controller.BaseJsonController;

/**
 * Activiti的控制类
 * @author zyx
 *
 */
@Controller
@RequestMapping("/actflow")
public class ActFlowController extends BaseJsonController{
	private static final Logger log = LoggerFactory
			.getLogger(ActFlowController.class);
	@Resource
	private RepositoryService repositoryService;
	@Resource
	private RuntimeService runtimeService;
	@Resource
	private TaskService taskService;
	@Resource
	private IActFlowService actFlowService;
	
	/**
	 * 获取流程定义列表
	 * @param request
	 * @param httpSession
	 * @param searchPage
	 * @param bindingResult
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/definitionlist", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean DefinitionList(
			HttpServletRequest request,HttpSession httpSession,
			@Valid @RequestBody ProjectPageReqBean searchPage,
			BindingResult bindingResult) throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   

		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		repositoryService = processEngine.getRepositoryService();
		respBean = actFlowService.getActDefinitionList(repositoryService);
		return respBean;
	}

	/**
	 * 获取流程实例列表
	 * @param request
	 * @param httpSession
	 * @param searchPage
	 * @param bindingResult
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/instancelist", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean InstanceList(
			HttpServletRequest request,HttpSession httpSession,
			@Valid @RequestBody ProjectPageReqBean searchPage,
			BindingResult bindingResult) throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   

		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		runtimeService = processEngine.getRuntimeService();
		
		respBean = actFlowService.getActProcessInstanceList(runtimeService);
		return respBean;
	}
	
	/**
	 * 获取任务列表
	 * @param request
	 * @param httpSession
	 * @param searchPage
	 * @param bindingResult
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/tasklist", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean TaskList(
			HttpServletRequest request,HttpSession httpSession,
			@Valid @RequestBody ProjectPageReqBean searchPage,
			BindingResult bindingResult) throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   

		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		taskService = processEngine.getTaskService();
		
		respBean = actFlowService.getActTaskList(taskService);
		return respBean;
	}
	
	@RequestMapping(value = "/start", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean startFlow(
			HttpServletRequest request,HttpSession httpSession,
			@Valid @RequestBody ActFlowStartReqBean actFlowStartReqBean,
			BindingResult bindingResult) throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   
		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		runtimeService = processEngine.getRuntimeService();
		respBean = actFlowService.startActFlow(runtimeService,actFlowStartReqBean.getProcessDefinitionId());
		return respBean;
	}
	
	/**
	 * 获取流程图
	 * @param request
	 * @param httpSession
	 * @param bindingResult
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/graph", method = RequestMethod.GET)
	public void Graph(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		
		Map<String, String[]> map= request.getParameterMap();
		String processDefinitionId = request.getParameter("processDefinitionId").replace("%3A", ":");
		String processInstanceId = request.getParameter("processInstanceId").replace("%3A", ":");
		String taskId = request.getParameter("taskId");	
		
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   

		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		// 设置响应的类型格式为图片格式
		response.setContentType("image/jpeg");
		// 禁止图像缓存。
		response.setHeader("Pragma", "no-cache");
		response.setHeader("Cache-Control", "no-cache");
		Command<InputStream> cmd = null;

		if (processDefinitionId != null) {
			cmd = new GetDeploymentProcessDiagramCmd(processDefinitionId);
		}

		if (processInstanceId != null) {
			cmd = new ActProcessInstanceDiagramCmd(processInstanceId);
		}

		if (taskId != null) {
			Task task = processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();
			cmd = new ActProcessInstanceDiagramCmd(task.getProcessInstanceId());
		}

		if (cmd != null) {
	        InputStream is = processEngine.getManagementService()
				.executeCommand(cmd);
	        OutputStream toClient = response.getOutputStream();
			int len = 0;
			byte[] b = new byte[1024];
			while ((len = is.read(b, 0, 1024)) != -1) {
				toClient.write(b, 0, len);
			}
			toClient.flush();
			toClient.close();
			is.close();
		}
	}
	
	@RequestMapping(value = "/taskComplete", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean TaskComplete(
			HttpServletRequest request,HttpSession httpSession,
			@Valid @RequestBody ActFlowReqBean actFlowReqBean,
			BindingResult bindingResult) throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		String taskId = actFlowReqBean.getTaskId();
		String taskName = actFlowReqBean.getTaskName();
		String agreeStr = actFlowReqBean.getAgreeStr();
		ServletContext servletContext = request.getSession().getServletContext();      
		ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);   

		ProcessEngine processEngine = (ProcessEngine) ctx.getBean("processEngine");

		taskService = processEngine.getTaskService();
		
		respBean = actFlowService.completeTask(taskService, taskId, taskName, agreeStr);
		return respBean;
	}
	
}

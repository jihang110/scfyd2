package com.ut.scf.service.bpm.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.sunyard.sunflow.client.SunflowClient;
import com.sunyard.sunflow.engine.context.WorkItemContext;
import com.sunyard.sunflow.engine.context.WorkItemContextCollection;
import com.sunyard.sunflow.engine.dataclass.WMTAttribute;
import com.sunyard.sunflow.engine.dataclass.WMTWflParticipant;
import com.sunyard.sunflow.engine.workflowexception.SunflowException;
import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.dict.ScfCacheDict;
import com.ut.scf.core.util.BeanUtil;
import com.ut.scf.core.util.ScfDateUtil;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.dao.bpm.FlowProTuningMapper;
import com.ut.scf.dao.bpm.FlowProjectMapper;
import com.ut.scf.dao.bpm.IExpenseDao;
import com.ut.scf.dao.bpm.IInvoiceMngDao;
import com.ut.scf.dao.bpm.IPriProjectDao;
import com.ut.scf.dao.finance.IRecManageDao;
import com.ut.scf.dao.sys.ICorpDao;
import com.ut.scf.pojo.FlowListInfo;
import com.ut.scf.pojo.WorkItemListInfo;
import com.ut.scf.reqbean.bpm.FlowSearchPageReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.PageRespBean;
import com.ut.scf.respbean.bpm.FKAddRespBean;
import com.ut.scf.respbean.bpm.JDAddRespBean;
import com.ut.scf.respbean.bpm.ProDetailRespBean;
import com.ut.scf.respbean.bpm.ProjectAddRespBean;
import com.ut.scf.respbean.bpm.WorkFlowRespBean;
import com.ut.scf.service.bpm.IWorkFlowService;

@Service("workflowService")
public class WorkFlowServiceImpl implements IWorkFlowService {

	private static final Logger log = LoggerFactory
			.getLogger(WorkFlowServiceImpl.class);

	private static final String fmt = "yyyy/MM/dd HH:mm:ss";

	@Resource
	private IExpenseDao expenseDao;
	
	@Resource
	private IInvoiceMngDao invoiceMngDao;
	
	@Resource
	private IPriProjectDao priProjectDao;
	
	@Resource
	private IRecManageDao recManageDao;
	
	@Resource
	private FlowProjectMapper flowProMapper;
	
	@Resource
	private FlowProTuningMapper flowProTuningMapper;
	
	@Resource
	private ICorpDao corpDao;
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getNotProcList(FlowSearchPageReqBean reqBean) {
		
		PageRespBean respBean = new PageRespBean();
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String monitorUrl = ScfCacheDict.sysConfigMap.get("monitorURL");
		
		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		paramMap.put("areaCode", areaCode);
		paramMap.put("monitorUrl", monitorUrl);
		
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		// 未结流程：等待我办理以及等待他人办理
		List<FlowListInfo> flowNotList = expenseDao.selectNotProcList(paramMap, page);
		// 分页设置
		respBean.setPages(page.getTotalPage());
		respBean.setRecords(page.getTotalRecord());
		respBean.setDataList(flowNotList);
		return respBean;
	}

	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getOverProcList(FlowSearchPageReqBean reqBean) {
		
		PageRespBean respBean = new PageRespBean();
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String monitorUrl = ScfCacheDict.sysConfigMap.get("monitorURL");
		
		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		paramMap.put("areaCode", areaCode);
		paramMap.put("monitorUrl", monitorUrl);
		
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		// 已结流程：有我参与的完结流程
		List<FlowListInfo> flowOverList = expenseDao.selectOverProcList(paramMap, page);
		// 分页设置
		respBean.setPages(page.getTotalPage());
		respBean.setRecords(page.getTotalRecord());
		respBean.setDataList(flowOverList);
		return respBean;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean getWkiDetailList(Map<String, Object> paramMap) {
		
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap
				.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String username = paramMap.get("username").toString();
		long procInsId = (long) paramMap.get("procInsId");
		ProDetailRespBean respBean = new ProDetailRespBean();
		List<WorkItemListInfo> details = new ArrayList<WorkItemListInfo>();
		SunflowClient sunflowClient = null;
		String proId = "";
		int status = 0;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");

			// 流程状态取得
			status = sunflowClient.getProcessInstanceStatusByProInsID(procInsId);
			
			// 列出所有工作项
			WorkItemContextCollection allWorkItems = sunflowClient
					.listWorkItems("PRI_ID = " + procInsId, areaCode);
			
			// 等待我办理:拉方式
			WorkItemContextCollection myWorkItems = sunflowClient
					.listWorkItems("WKI_STATE = 2 AND WKA_APPLYMAN LIKE '%," + username
							+ ",%' AND PRI_ID = " + procInsId, areaCode);

			for (int i = 0; i < allWorkItems.size(); i++) {
				WorkItemContext wic = allWorkItems.get(i);
				WorkItemListInfo info = new WorkItemListInfo();
				info.setWorkItemId(wic.getWorkItemID());
				info.setName(wic.getWorkItemName());
				info.setStartDate(ScfDateUtil.format(wic.getDeliverTime(),fmt));
				info.setEndDate(ScfDateUtil.format(wic.getWorkItemCheckedInTime(), fmt));
				info.setUser(StringUtils.isEmpty(wic.getExecutorID()) ? "-" : wic.getExecutorID());
				info.setProcInsId(wic.getProInstanceID());
				// 节点ID
				WMTAttribute[] stepIds = sunflowClient.getWorkItemRelevantData(
						wic.getWorkItemID(), new String[] { "nodeId" }, areaCode);
				String stepId = stepIds[0].getStringValue();
				String flowType = stepId.substring(0, 1);
				String chkNm = stepId.substring(1);
				info.setStepId(stepId);
				// 供应商id
				WMTAttribute[] custIds = sunflowClient.getWorkItemRelevantData(
						wic.getWorkItemID(), new String[] { "custNo" }, areaCode);
				String custNo = custIds[0].getStringValue();
				info.setCustNo(custNo);
				WMTAttribute[] proNames = sunflowClient.getWorkItemRelevantData(
						wic.getWorkItemID(), new String[] { "proName" }, areaCode);
				String proName = proNames[0].getStringValue();
				info.setProName(proName);
				WMTAttribute[] creditModes = sunflowClient.getWorkItemRelevantData(
						wic.getWorkItemID(), new String[] { "creditMode" }, areaCode);
				if(creditModes.length !=0){
					String creditMode = creditModes[0].getStringValue();
					info.setCreditMode(creditMode);			
				}
				// 项目id
				WMTAttribute[] proIds = sunflowClient.getWorkItemRelevantData(
						wic.getWorkItemID(), new String[] { "proNo" }, areaCode);
				
				if(proIds.length !=0){
					proId = proIds[0].getStringValue();
					info.setProId(proId);		
				}
				// 工作项未完成
				if (wic.getState() == 1 || wic.getState() == 2 || wic.getState() == 4) {
					// 待办状态
					info.setEndDate("-");
					info.setStatus("3");
					// 当前用户正好为执行者，可以进行操作（经办、转移权限），否则只能查看
					if (username.equals(wic.getExecutorID()) || myWorkItems.size() > 0) {
						respBean.setWorkItemId(wic.getWorkItemID());
						respBean.setOperateFlg(1);
						respBean.setStepId(stepId);
						respBean.setCustNo(custNo);
						respBean.setProName(proName);
						if(creditModes.length !=0){
							String creditMode = creditModes[0].getStringValue();
							respBean.setCreditMode(creditMode);		
						}
						respBean.setProId(proId);	
					}
				} else {
					// 审批意见取得
					WMTAttribute[] agrees = null;
					WMTAttribute[] advices = null;

					// 项目尽调流程
					if ("X".equals(flowType)) {
						// 立项申请，风险初审，风险终审，合同申请，放款申请
						if ("X1".equals(stepId)) {
							info.setStatus("2");// 2--申请
							// 审批
						} else {
							agrees = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "agree" + chkNm }, areaCode);
							advices = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "advice" + chkNm }, areaCode);
							WMTAttribute[] flagResults = sunflowClient.getProcessRelevantData(
									procInsId, new String[] { "flagResult" }, areaCode);
							Boolean flagResult = flagResults[0].getBooleanValue();
							if(flagResult){
								// 项目尽调同意后更新项目管理表状态
								Map<String, Object> updateMap = new HashMap<String, Object>();
								Map<String, Object> proMap = new HashMap<String, Object>();
								updateMap.put("proId", proId);
								Map<String, Object> fpMap = flowProMapper.selectFlowProject(updateMap);
								if(!fpMap.isEmpty()&&fpMap.get("proStatus").toString().equals("0")){
									updateMap.put("proStatus", 1);
									updateMap.put("state", 0);
									WMTAttribute[] arAmts = sunflowClient.getWorkItemRelevantData(
											wic.getWorkItemID(), new String[] { "arAmt" }, areaCode);
									if(arAmts.length !=0){
										String arAmt = arAmts[0].getStringValue();
										updateMap.put("loanAmt", arAmt);
									}
									int updateNum = flowProMapper.updateFlowProject(updateMap);
									log.debug("update flowProject num {}", updateNum);
									if (updateNum <= 0) {
										respBean.setResult(ErrorCodeEnum.UPDATE_FAILED);
										return respBean;
									}
								}
								// 尽调完成插入scfcore数据库
								WMTAttribute[] allAttrs = sunflowClient.getProcessRelevantData(procInsId, null, areaCode);
								for (int k = 0; k < allAttrs.length; k++) {
									proMap.put(allAttrs[k].getAttributeName(), allAttrs[k].getStringValue());
								}
								proMap.put("recUid", ScfUUID.generate());
								int insertNum = flowProTuningMapper.insertFlowProTuning(proMap);
								log.debug("insert flowProTuning num {}", insertNum);
								if (insertNum <= 0) {
									respBean.setResult(ErrorCodeEnum.ADD_FAILED);
									return respBean;
								}
							}
						}
						
						// 其他流程：立项审批L，合同签署H，放款审批F
					} else if ("L".equals(flowType)) {
						if ("L1".equals(stepId)) {
							info.setStatus("2");// 2--申请
							// 审批
						} else {
							agrees = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "agree" + chkNm }, areaCode);
							advices = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "advice" + chkNm }, areaCode);
						}
					} else if ("F".equals(flowType)) {
						if ("F1".equals(stepId)) {
							info.setStatus("2");// 2--申请
							// 审批
						} else{
							agrees = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "agree" + chkNm  }, areaCode);
							advices = sunflowClient.getWorkItemRelevantData(
									wic.getWorkItemID(),
									new String[] { "advice" + chkNm }, areaCode);
						}
					}
					
					if (agrees != null) {
						info.setStatus(agrees[0].getStringValue());// 0--同意,1--不同意
					}
					if (advices != null) {
						info.setAdvice(advices[0].getStringValue());
					}
				}
				details.add(info);
			}
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}
		// 工作项按开始时间顺序排序
		if (CollectionUtils.isNotEmpty(details)) {
			Collections.sort(details, new Comparator<WorkItemListInfo>() {

				@Override
				public int compare(WorkItemListInfo o1, WorkItemListInfo o2) {
					return o1.getStartDate().compareTo(o2.getStartDate());
				}
			});
			
			// 终止的场合
			if (status == 4) {
				details.get(details.size() - 1).setUser(priProjectDao.selectTerminateUserName(procInsId));// 终止流程用户名称
				details.get(details.size() - 1).setStatus("4");// 4--终止
			}
		}
		
		respBean.setDataList(details);
		return respBean;
	}

	// 查看流程详情需要改造
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getProDetailInfo(Map<String, Object> paramMap) {
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap
				.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		long workItemId = (long) paramMap.get("workItemId");
		String username = paramMap.get("username").toString();
		String stepId = paramMap.get("stepId").toString();
		String flowType = stepId.substring(0, 1);
		BaseRespBean respBean = new BaseRespBean();
		Map<String, Object> attrDataMap = new HashMap<String, Object>();
		SunflowClient sunflowClient = null;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");

			WMTAttribute[] attrs = sunflowClient
					.getWorkItemRelevantData(workItemId, null, areaCode);
			for (WMTAttribute attr : attrs) {
				String attrName = attr.getAttributeName();
				int attrType = attr.getAttributeType();
				if (attrType == 1) {
					attrDataMap.put(attrName, attr.getIntValue());
				} else if (attrType == 2) {
					attrDataMap.put(attrName, attr.getBooleanValue());
				} else if (attrType == 3) {
					attrDataMap.put(attrName, attr.getDoubleValue());
				} else if (attrType == 4) {
					attrDataMap.put(attrName, attr.getStringValue());
				} else if (attrType == 5) {
					attrDataMap.put(attrName, attr.getTimestampValue());
				} else if (attrType == 6) {
					attrDataMap.put(attrName, attr.getDateValue());
				} else {
					attrDataMap.put(attrName, attr.getObjectValue());
				}
			}
			
			// 立项审批流程
			if ("L".equals(flowType)) {
					respBean = new ProjectAddRespBean();
				// 项目尽调
			} else if ("X".equals(flowType)) {
				respBean = new JDAddRespBean();
				// 放宽审批
			} else if ("F".equals(flowType)) {
				respBean = new FKAddRespBean();
			} 
			
			BeanUtil.mapToBean(attrDataMap, respBean);
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}
		return respBean;
	}
	
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean reApply(Map<String, Object> paramMap) {
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap
				.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String username = paramMap.get("username").toString();
		long workItemId = (long) paramMap.get("workItemId");
		BaseRespBean respBean = new BaseRespBean();
		SunflowClient sunflowClient = null;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");

			// checkout
			int workState = sunflowClient
					.getWorkItemStatusByWorkItemID(workItemId);
			if (workState == 1) {
				sunflowClient.checkOutWorkItem(workItemId);
			} else if (workState == 2) {
				sunflowClient.applyWorkItem(workItemId);
			} else if (workState == 6) {
				respBean.setResult(ErrorCodeEnum.WKI_STATE_ERROR);
				return respBean;
			}
			
			// checkin
			WMTAttribute[] attrs = sunflowClient.getWorkItemRelevantData(
					workItemId, null, areaCode);
			String attributesName = "";
			int attrType = 0;
			
			for (WMTAttribute attr : attrs) {
				attributesName = attr.getAttributeName();
				attrType = attr.getAttributeType();
				
				if (paramMap.containsKey(attributesName)) {
					// 属性类型 int - 1 bool - 2 double - 3 String - 4 Timestamp
					// - 5 Date - 6 Array - 7 File - 8 Object - 9 Binary -
					// 10
					if (attrType == 1) {
						attr.setIntValue(Integer.parseInt(paramMap.get(attributesName).toString()));
					} else if (attrType == 2) {
						attr.setBooleanValue(Boolean.parseBoolean(paramMap.get(attributesName).toString()));
					} else if (attrType == 3) {
						attr.setDoubleValue(Double.parseDouble(paramMap.get(attributesName).toString()));
					} else if (attrType == 4) {
						attr.setStringValue(paramMap.get(attributesName) == null ?
								"" : String.valueOf(paramMap.get(attributesName)));
					} else if (attrType == 5) {
						attr.setTimestampValue(Timestamp.valueOf(paramMap.get(attributesName).toString()));
					} else if (attrType == 6) {
						attr.setDateValue(ScfDateUtil.parseDate(paramMap.get(attributesName).toString()));
					} else if (attrType == 7) {
						attr.setArrayValue(paramMap.get(attributesName));
					} else if (attrType == 8) {
						// wa.setFileValue(arg0);
					} else if (attrType == 9) {
						attr.setObjectValue(paramMap.get(attributesName));
					} else if (attrType == 10) {
						// wa.setBinaryValue(arg0);
					}
				}
			}
			
			sunflowClient.modifyWorkItemRelevantData(workItemId, attrs, areaCode);
			sunflowClient.checkInWorkItem(workItemId);
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}
		return respBean;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean chkWorkItem(Map<String, Object> paramMap) {
		
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap
				.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String username = paramMap.get("username").toString();
		long workItemId = (long) paramMap.get("workItemId");
		String agreeFlg = paramMap.get("agreeFlg").toString();
		String proAdvice = (String) paramMap.get("proAdvice");
		String stepId = (String) paramMap.get("stepId");
		String proId = (String) paramMap.get("proId");
		String custNo = (String) paramMap.get("custNo");
		String loanAmt = (String) paramMap.get("loanAmt");
		String projectName = (String) paramMap.get("projectName");
		String chkNm = stepId.substring(1);

		BaseRespBean respBean = new BaseRespBean();
		SunflowClient sunflowClient = null;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");

			// checkout
			int workState = sunflowClient
					.getWorkItemStatusByWorkItemID(workItemId);
			if (workState == 1) {
				sunflowClient.checkOutWorkItem(workItemId);
			} else if (workState == 2) {
				sunflowClient.applyWorkItem(workItemId);
			} else if (workState == 6) {
				respBean.setResult(ErrorCodeEnum.WKI_STATE_ERROR);
				return respBean;
			}

			// checkin
			WMTAttribute[] attr = sunflowClient.getWorkItemRelevantData(workItemId, null, areaCode);
			Map<String, Object> proMap = new HashMap<String, Object>();
			Map<String, Object> corpParam = new HashMap<String, Object>();
			// 项目id
			WMTAttribute[] proIds = sunflowClient.getWorkItemRelevantData(
					workItemId, new String[] { "proNo" }, areaCode);
			
			if(proIds.length !=0){
				proId = proIds[0].getStringValue();
			}
			// 放款金额
			WMTAttribute[] loanAmts = sunflowClient.getWorkItemRelevantData(
					workItemId, new String[] { "loanAmt" }, areaCode);
			
			if(loanAmts.length !=0){
				loanAmt = loanAmts[0].getStringValue();
			}
			
		
			for (WMTAttribute attribute : attr) {
				// 审批
				if ("X2".equals(stepId) || "L2".equals(stepId)
						|| "F2".equals(stepId) || "F3".equals(stepId)
						|| "F4".equals(stepId) || "F5".equals(stepId) ) {
					if (("agree" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(agreeFlg);
					} else if (("advice" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(proAdvice);
					}
				} else if("L3".equals(stepId)){ // 立项最后一步
					if (("agree" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(agreeFlg);
						if(agreeFlg.equals("0")){ // 立项结束更新项目状态  项目状态：0已立项，1已尽调，2已签署,3已放款,4资产包
							//1.更改corpInfo表中prd_status为1                     立项状态 0:未立项 1:已立项
							corpParam.put("corpId",custNo );
							corpParam.put("prdStatus", 1);
							int updatecorpNum = corpDao.updateCorpInfoByPrimaryKey(corpParam);
							log.debug("update corp_info num {}", updatecorpNum);
							if (updatecorpNum <= 0) {
								respBean.setResult(ErrorCodeEnum.UPDATE_FAILED);
								return respBean;
							}
							// 2.立项后添加项目管理表
							String creditMode = (String) paramMap.get("creditMode");
							byte creditModeByte = 0;
							switch (creditMode) {
							case "首笔":creditModeByte = 0;break;
							case "增额":creditModeByte = 1;break;
							case "置换续期":creditModeByte = 2;break;
							case "循环额度":creditModeByte = 3;break;
							case "其他":creditModeByte = 4;break;
							default: break;
							}
							//项目id
							proMap.put("proId", ScfUUID.generate());
							//供应商id
							proMap.put("corpId", custNo);
							//项目状态：0已立项，1已尽调，2已签署,3已放款,4资产包
							proMap.put("proStatus", 0);
							proMap.put("creditMode", creditModeByte);
							proMap.put("projectName", projectName);
							int insertNum = flowProMapper.insertFlowProject(proMap);
							log.debug("insert FlowProject num {}", insertNum);
							if (insertNum <= 0) {
								respBean.setResult(ErrorCodeEnum.ADD_FAILED);
								return respBean;
							}
						}
					} else if (("advice" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(proAdvice);
					}
				} else if("F6".equals(stepId)){ // 放款最后一步
					if (("agree" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(agreeFlg);
						if(agreeFlg.equals("0")){ // 立项结束更新项目状态  项目状态：0已立项，1已尽调，2已签署,3已放款,4资产包
							proMap.put("proId", proId);
							proMap.put("proStatus", 3);
							proMap.put("state", 0);
							paramMap.put("loanAmt", loanAmt);
							int updateNum = flowProMapper.updateFlowProject(proMap);
							log.debug("update flowProject num {}", updateNum);
							if (updateNum <= 0) {
								respBean.setResult(ErrorCodeEnum.UPDATE_FAILED);
								return respBean;
							}
						}
					} else if (("advice" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(proAdvice);
					}
				} else if("X4".equals(stepId)){ // 尽调最后一步
					if (("agree" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(agreeFlg);
					} else if (("advice" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(proAdvice);
					} else if ("flag".equals(attribute.getAttributeName())) {
						if(agreeFlg.equals("0")){
							attribute.setBooleanValue(true);
						}
					}
				}else if("X3".equals(stepId)){ // 尽调风控
					if (("agree" + chkNm).equals(attribute.getAttributeName())) {
						attribute.setStringValue(agreeFlg);
					} else {
						String attributesName = "";
						int attrType = 0;
						attributesName = attribute.getAttributeName();
						attrType = attribute.getAttributeType();
						
						if (paramMap.containsKey(attributesName)) {
							// 属性类型 int - 1 bool - 2 double - 3 String - 4 Timestamp
							// - 5 Date - 6 Array - 7 File - 8 Object - 9 Binary -
							// 10
							if (attrType == 1) {
								attribute.setIntValue(Integer.parseInt(paramMap.get(attributesName).toString()));
							} else if (attrType == 2) {
								attribute.setBooleanValue(Boolean.parseBoolean(paramMap.get(attributesName).toString()));
							} else if (attrType == 3) {
								attribute.setDoubleValue(Double.parseDouble(paramMap.get(attributesName).toString()));
							} else if (attrType == 4) {
								attribute.setStringValue(paramMap.get(attributesName) == null ?
										"" : String.valueOf(paramMap.get(attributesName)));
							} else if (attrType == 5) {
								attribute.setTimestampValue(Timestamp.valueOf(paramMap.get(attributesName).toString()));
							} else if (attrType == 6) {
								attribute.setDateValue(ScfDateUtil.parseDate(paramMap.get(attributesName).toString()));
							} else if (attrType == 7) {
								attribute.setArrayValue(paramMap.get(attributesName));
							} else if (attrType == 8) {
								// wa.setFileValue(arg0);
							} else if (attrType == 9) {
								attribute.setObjectValue(paramMap.get(attributesName));
							} 
						}
					}
					
				}
			}
			sunflowClient.modifyWorkItemRelevantData(workItemId, attr, areaCode);
			//不同意
			if("1".equals(agreeFlg)){
				String proUserName = sunflowClient.findWorkItem(workItemId-1).getExecutorID();
				String workItemName = sunflowClient.findWorkItem(workItemId-1).getWorkItemName();
				//指定用户检入
				Map<String,List<String>> userMap = new HashMap<String,List<String>>();
				List<String> userList = new ArrayList<String>();
				userList.add(proUserName);
				userMap.put(workItemName, userList);
				//Map ss = sunflowClient.getNextNodeExecutors(workItemId);
				sunflowClient.checkInWorkItem(workItemId,userMap);
			}else{
				sunflowClient.checkInWorkItem(workItemId);
			}
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}

		return respBean;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean create(Map<String, Object> paramMap) {
		
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		// 用户名
		String username = paramMap.get("username").toString();
		// 工作流名称
		String sunFlowNm = paramMap.get("workflowNm").toString();
		BaseRespBean respBean = new BaseRespBean();
		SunflowClient sunflowClient = null;
		try {
			// 构造一个工作流客户端对象，和引擎建立连接
			sunflowClient = new SunflowClient(url, port);
			// 用户登录
			sunflowClient.connect(username, "");
			
			long procInsID = 0;
			int weight = 0;
			procInsID = sunflowClient.createProcessInstanceByName(sunFlowNm,
					sunFlowNm, sunFlowNm, weight, 20, areaCode);
			paramMap.put("procInsID", procInsID);

			// 流程变量
			WMTAttribute[] attrs = sunflowClient.getProcessRelevantData(procInsID, null, areaCode);
			String attributesName = "";
			int attrType = 0;
			
			for (WMTAttribute attr : attrs) {
				attributesName = attr.getAttributeName();
				attrType = attr.getAttributeType();
				
				if (paramMap.containsKey(attributesName)) {
					if (paramMap.get(attributesName) == null) {
						continue;
					}
					
					// 属性类型
					// int - 1, bool - 2, double - 3, String - 4, Timestamp - 5,
					// Date - 6, Array - 7, File - 8, Object - 9, Binary -10
					if (attrType == 1) {
						attr.setIntValue(Integer.parseInt(paramMap.get(attributesName).toString()));
					} else if (attrType == 2) {
						attr.setBooleanValue(Boolean.parseBoolean(paramMap.get(attributesName).toString()));
					} else if (attrType == 3) {
						attr.setDoubleValue(Double.parseDouble(paramMap.get(attributesName).toString()));
					} else if (attrType == 4) {
						attr.setStringValue(String.valueOf(paramMap.get(attributesName)));
					} else if (attrType == 5) {
						attr.setTimestampValue(Timestamp.valueOf(paramMap.get(attributesName).toString()));
					} else if (attrType == 6) {
						attr.setDateValue(ScfDateUtil.parseDate(paramMap.get(attributesName).toString()));
					} else if (attrType == 7) {
						attr.setArrayValue(paramMap.get(attributesName));
					} else if (attrType == 8) {
						// wa.setFileValue(arg0);
					} else if (attrType == 9) {
						attr.setObjectValue(paramMap.get(attributesName));
					} else if (attrType == 10) {
						// wa.setBinaryValue(arg0);
					}
				}
			}
			
			sunflowClient.modifyProcessInstanceRelevantData(procInsID, attrs,
					areaCode);
			sunflowClient.startProcess(procInsID, areaCode);

			/**
			 * checkout
			 */
			// 根据工作流Id查询当前节点的位置取得节点Id
			WorkItemContextCollection wcc = sunflowClient.listWorkItems(
					"PRI_STATE = 1 AND WKI_STATE in (1, 2) AND WKI_PriID = " + procInsID, areaCode);
			if (wcc.size() < 1) {
				return respBean;
			}
			long workItemId = wcc.get(0).getWorkItemID();
			int workState = sunflowClient
					.getWorkItemStatusByWorkItemID(workItemId);
			if (workState == 1) {
				sunflowClient.checkOutWorkItem(workItemId);
			} else if (workState == 2) {
				sunflowClient.applyWorkItem(workItemId);
			} else if (workState == 6) {
				respBean.setResult(ErrorCodeEnum.WKI_STATE_ERROR);
				return respBean;
			}

			/**
			 * checkin
			 */
			sunflowClient.checkInWorkItem(workItemId);
		} catch (SunflowException e) {
			log.error(e.getMessage(), e);
			respBean.setResult(ErrorCodeEnum.CREATE_SUNFLOW_ERROR);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}
		return respBean;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean terminate(Map<String, Object> paramMap) {
		
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap.get("workflowport"));
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String username = paramMap.get("username").toString();
		long procInsId = (long) paramMap.get("procInsId");
		BaseRespBean respBean = new BaseRespBean();
		SunflowClient sunflowClient = null;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");
			
			// 流程终止
			sunflowClient.terminateProcessInstanceCascade(procInsId, areaCode);
			
			// 流程实例与项目名称对应关系表_终止流程用户名称登入
			int updCnt = priProjectDao.updatePriProject(paramMap);
			if (updCnt <= 0) {
				respBean.setResult(ErrorCodeEnum.UPDATE_FAILED);
				return respBean;
			}
			
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		}
		return respBean;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean transfer(Map<String, Object> paramMap) {
		
		String url = ScfCacheDict.sysConfigMap.get("workflowengine");
		int port = Integer.parseInt(ScfCacheDict.sysConfigMap.get("workflowport"));
		String username = paramMap.get("username").toString();
		String transferUser = paramMap.get("transferUser").toString();
		long workItemId = (long) paramMap.get("workItemId");
		BaseRespBean respBean = new BaseRespBean();
		SunflowClient sunflowClient = null;
		try {
			sunflowClient = new SunflowClient(url, port);
			sunflowClient.connect(username, "");
			int workState = sunflowClient.getWorkItemStatusByWorkItemID(workItemId);
			// 拉方式
			if (workState == 2) {
				sunflowClient.applyWorkItem(workItemId);
			}
			WMTWflParticipant participant = new WMTWflParticipant();
			participant.setParticipantID(transferUser);
			sunflowClient.modifyWorkItemExecutor(workItemId, participant);
			respBean.setResult(ErrorCodeEnum.SUCCESS);
		} catch (Exception e) {
			respBean.setResult(ErrorCodeEnum.SUNFLOW_ERROR);
			log.error(e.getMessage(), e);
		} finally {
			if (sunflowClient != null) {
				try {
					sunflowClient.disconnect();
				} catch (Exception ex) {
					respBean.setResult(ErrorCodeEnum.DISC_SUNFLOW_ERROR);
					log.error(ex.getMessage(), ex);
				}
			}
		}
		return respBean;
	}

	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getOnPassageItemCount(Map<String, Object> paramMap) {
		WorkFlowRespBean respBean = new WorkFlowRespBean();
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String monitorUrl = ScfCacheDict.sysConfigMap.get("monitorURL");
		paramMap.put("areaCode", areaCode);
		paramMap.put("monitorUrl", monitorUrl);
		List<FlowListInfo> flowNotList = expenseDao.selectNotProcList(paramMap);
		respBean.setWorkItemsCount(flowNotList.size());
		return respBean;
	}

	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getOverItemCount(Map<String, Object> paramMap) {
		WorkFlowRespBean respBean = new WorkFlowRespBean();
		String areaCode = ScfCacheDict.sysConfigMap.get("areaCode");
		String monitorUrl = ScfCacheDict.sysConfigMap.get("monitorURL");
		paramMap.put("areaCode", areaCode);
		paramMap.put("monitorUrl", monitorUrl);
		List<FlowListInfo> flowNotList = expenseDao.selectOverProcList(paramMap);
		respBean.setWorkItemsCount(flowNotList.size());
		return respBean;
	}
}

package com.ut.scf.service.asset.impl;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.dao.asset.IPackageManagerDao;
import com.ut.scf.dao.bpm.FlowProjectMapper;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.PageRespBean;
import com.ut.scf.service.asset.IPackageManagerService;

/**
 * 
 * @author sheny
 *
 */
@Service("packageManagerService")
public class PackageManagerServiceImpl implements IPackageManagerService{
	private static final Logger log = LoggerFactory
			.getLogger(PackageManagerServiceImpl.class);
	
	@Resource private IPackageManagerDao packageDao;
	@Resource private FlowProjectMapper flowProjectMapper;
	
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getPackageList(Map<String, Object> paramMap, PageInfoBean page) {
		List<Map<String, Object>> list = packageDao.selectPackageList(paramMap, page);
		PageRespBean respBean = new PageRespBean();
		respBean.setPages(page.getTotalPage());
		respBean.setRecords(page.getTotalRecord());
		respBean.setDataList(list);
		return respBean;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean addPackage(Map<String, Object> paramMap) {
		BaseRespBean respBean = new BaseRespBean();
		if (CollectionUtils.isEmpty((List<?>) paramMap.get("proIds"))) {
			respBean.setResult(ErrorCodeEnum.ADD_FAILED);
			return respBean;
		}
		// 生成主键Id
		String id = ScfUUID.generate();
		paramMap.put("recUid", id);
		int insertNum = packageDao.insertPackage(paramMap);
		log.debug("insert Package num {}", insertNum);
		if (insertNum <= 0) {
			respBean.setResult(ErrorCodeEnum.ADD_FAILED);
			return respBean;
		}
		paramMap.put("apId", id);
		insertNum = flowProjectMapper.updateFlowProjectByPackage(paramMap);
		log.debug("update flow project num {}", insertNum);
		if (insertNum <= 0) {
			respBean.setResult(ErrorCodeEnum.ADD_FAILED);
			return respBean;
		}
		
		return respBean;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean updatePackage(Map<String, Object> paramMap) {
		BaseRespBean respBean = new BaseRespBean();

		int updateNum = packageDao.updatePackage(paramMap);
		log.debug("update Package num {}", updateNum);
		if (updateNum <= 0) {
			respBean.setResult(ErrorCodeEnum.UPDATE_FAILED);
			return respBean;
		}
		return respBean;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean deletePackage(String recUid) {
		BaseRespBean respBean = new BaseRespBean(); 
		int deleteNum = packageDao.deletePackage(recUid);
		log.debug("delete Package num {}", deleteNum);
		if (deleteNum <= 0) {
			respBean.setResult(ErrorCodeEnum.DELETE_FAILED);
			return respBean;
		}
		return respBean;
	}
	


}